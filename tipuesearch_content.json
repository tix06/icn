{"pages":[{"loc":"http://benjaminabel.github.io/icn/pages/a-propos.html","title":"A propos","resume":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua","tags":"pages","text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."},{"loc":"http://benjaminabel.github.io/icn/pages/faq.html","title":"faq","resume":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua","tags":"pages","text":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."},{"loc":"http://benjaminabel.github.io/icn/officiel/programme-de-lenseignement-dexploration-icn-en-seconde/","title":"Programme de l'enseignement d'exploration ICN en seconde","resume":"Quelques éléments du programme qui peut-être retrouvé intégralement grâce au lien en bas de page","tags":"Officiel","text":"Quelques éléments du programme qui peut-être retrouvé intégralement grâce au lien en bas de page. Préambule L'ambition de cet enseignement d'exploration est d'amener les élèves de seconde à comprendre que leurs pratiques numériques quotidiennes sont rendues possibles par une science informatique rigoureuse et qu'elles s'inscrivent à leur tour dans un réseau d'enjeux qui dépassent largement les apparences. En somme, il s'agira de partir de l'expérience ordinaire du numérique d'un élève de seconde, pour explorer les couches scientifiques et techniques qui la rendent possible ainsi que les sphères sociales, commerciales et politiques où elle s'insère. C'est pourquoi l'intitulé de cet enseignement conjoint les deux notions d'informatique et de numérique. Quant à la notion de créatio n, elle indique que cet enseignement devra se faire par le biais de projets et d'activités. Il ne s'agira donc pas de proposer un enseignement purement théorique, mais bien d'amener les élèves à explorer l'en-deçà et l'au-delà des apparences par une mise en activité. En-deçà : les machines, la numérisation de l'information, les algorithmes, les programmes, les logiciels, les réseaux ; au-delà : les usages personnels, sociaux, professionnels, scientifiques, politiques, idéologiques rendus possibles par le numérique, ainsi que les enjeux qui y sont liés. Les objectifs L'enseignement d'exploration « Informatique et création numérique » a le double objectif d'apporter aux élèves de seconde des connaissances et modes de raisonnement du domaine de la science informatique et de les conduire à un premier niveau d'analyse critique des enjeux industriels, économiques et sociétaux induits par le numérique. En interaction avec le parcours Avenir, les élèves sont amenés à prendre conscience de la diversité des champs d'activités dans lesquels le numérique occupe une place de plus en plus déterminante. Modalités pédagogiques Cet enseignement privilégie un apprentissage par la mise en activité et en projet des élèves. Les activités proposées pourront prendre la forme de résolutions de problèmes avec ou sans ordinateur, ou de réalisation de produits (programmes, documents hypertextes, animations, images, sons, dispositifs techniques, etc.). Les élèves, seuls ou en petits groupes, explorent, essayent, proposent. Les enseignants peuvent accompagner les élèves à plusieurs niveaux : pour les aider à structurer, clarifier, simplifier, mais aussi leur apporter des éléments théoriques et méthodologiques nécessaires. Les enseignants peuvent encourager les élèves à recourir, dans une démarche autonome, aux ressources disponibles à l' auto-formation : tutoriels, e-learning, cours en ligne ouverts. Cela peut permettre de mettre en place des situations pédagogiques dans lesquelles les enseignants proposent des activités ciblées sur les problèmes de compréhension des élèves. Source: Bulletin officiel Bulletin officiel n°31 du 27-08-2015"},{"loc":"http://benjaminabel.github.io/icn/html/ajouter-du-dynamisme-avec-javascript/","title":"Ajouter du dynamisme avec javascript","resume":"JavaScript est un langage de programmation de scripts principalement employé dans les pages web interactives mais aussi pour les serveurs","tags":"HTML","text":"JavaScript est un langage de programmation de scripts principalement employé dans les pages web interactives mais aussi pour les serveurs. >Le langage a été créé en 1995 par Brendan Eich (Brendan Eich étant membre du conseil d'administration de la fondation Mozilla à cette époque) pour le compte de Netscape Communications Corporation. Source Wikipedia Attention à ne pas confondre le javascript et le java , ce sont des langages différents. Intégration de code javascript dans une page html Le code javascript peut être intégré directement grâce à la balise html <script> , soit dans écrit directement dans l'en-tête du document( <head> ), soit en utilisant un fichier séparé avec l'extension .js . Directement dans la page html <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" /> <title> Un peu de javascript </title> <script type= \"text/javascript\" charset= \"utf-8\" > // Alert crée une fenêtre d'affichage sur l'écran pour l'utilisateur alert(\"Hello world !\"); // console.log() écrit dans la console du navigateur pour le développeur console.log(\"Script Hello world exécuté.\") </script> </head> <body> <h1> Titre principal de mon document </h1> <p> Regarde maman, je suis en train d'ajouter du code javascript à ma page. </p> </body> </html> Dans un fichier script.js séparé <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" /> <title> Un document minuscule </title> <script src= \"script.js\" ></script> </head> <body> <h1> Titre principal de mon document </h1> <p> Regarde maman, je suis en train d'ajouter du code javascript à ma page. </p> </body> </html> Tester du code javascript grâce à l'ardoise La plupart de navigateurs dispose d'une console pour tester le code javascript. Dans le cas de firefox, on la lance avec le raccourci MAJ+F4 . Sinon, vous pouvez y accéder par le menu de Développement web . Il est aussi très utile d'ouvrir également la console CTRL+MAJ+K web pour pouvoir afficher des résultats dans celle-ci grâce à la fonction console.log() . L'éxecution du code javascript s'effectue en appuyant sur le bouton Exécuter (ou le raccourci clavier CTRL+R ) Syntaxe du javascript Il s'agit d'un langage très complet, qui ne peut pas être expliqué en quelques lignes, pour une référence plus complète, voir l'article Wikipedia Syntaxe javascript Les commentaires sont notés précédés de deux barres obliques: // . Les instructions simples sont terminées par un point-virgule : ; . L' indentation des blocs d'instruction n'est pas obligatoire comme en python, mais souhaitable. Les blocs d'instructions sont entourés d'accolades. if (expression1) { //instructions réalisées si expression1 est vraie; } else { //instructions réalisées dans les autres cas; } Variables javascript Les variables n'ont pas de type défini, on parle de typage dynamique comme en python. Il est possible de modifier le type de donnée contenue dans une variable. Coller le code suivant dans l'ardoise javascript pour l'éxecuter et l'éxaminer. var myString = '123.456' // console .log permet d 'afficher la valeur dans la console web console.log(myString); // On peut directement inspecter une ligne directement // en la sélectionnant puis Examiner (CTRL+I) typeof(myString); // value:string // Ou un beau console.log pour garder des traces de l' éxecution du programme console .log ( 'myString est actuellement du type:' + typeof ( myString ) ); // Illustration du typage dynamique var myString = Number ( myString ); console .log ( myString ); typeof myString ; // value :number console .log ( 'myString est actuellement du type:' + typeof ( myString ) ); Il est vivement conseillé de déclarer ses variables avec l'instruction var pour des questions de portée de variable. Remarque le javascript définit aussi des constantes avec l'instruction const qui comme son nom l'indique ne peut pas changer de valeur grâce à une assignation ou être re-déclarée au cours du programme contrairement à une variable. // Réassignation possible avec les variables var c = 6; console.log(c); // donne 6 c = 4; console.log(c); // donne 4 // Réassignation impossible avec les constantes const a = 5; a = 4; // Exception: redeclaration of const a Fonctions javascript Une fonction est déclarée de la façon suivante en javascript: function nomDeMaFonction ( argument1 , argument2 , ...) { instructions return valeur_renvoyée_par_ma fonction } Exemple : la fonction carré // Déclaration de la fonction function carré ( nombre ) { return nombre * nombre } // Appel de la fonction carré ( 2 ); // retourne 4! Attention : Lorsqu'on déclare une variable dans une fonction, celle-ci a une portée locale et ne peut pas être utilisée en dehors de la fonction. // n ici une variable locale dans la fonction function quatreFois ( nombre ) { var n = 4 return n * nombre } // Elle n'existe pas en dehors de la fonction quatreFois ( 2 ); // retourne 8! n * 2 ; // Exception: n is not defined Modifier le code html grâce à javascript Execution différée Il convient d'attendre que la page html soit chargée avant d'éxecuter le code javascript. De nombreux développeurs placent le code javascript à la fin du corps du document avant la balise fermante </body> . Cependant il est aussi possible de lancer le code javascript qu'après le chargement de la fenêtre en placant le code dans une fonction anonyme s'executant après le chargement de la page. (Vous allez voir, en javascript, les fonctions sont très présentes) window . onload = function () { // code javascript à éxecuter // après le chargement de la page } Accéder à un élément html La méthode document.getElementById() permet de sélectionner un élément html à partir de son id . On peut alors modifier son contenu grâce à la propriété innerHTML , document.getElementById(\"this-id\").innerHTML = \"New text!\"; ou encore modifier son style grâce à la prpriété style . document.getElementById(\"this-id\").style.color = \"##FFAA85\"; Exemple de code permettant d'afficher l'heure à laquelle vous avez ouvert la page. <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" /> <title> Un peu de javascript </title> <script type= \"text/javascript\" charset= \"utf-8\" > window.onload = function() { // Stocke l'heure dans la vaariable d var d = new Date(); // Ajoute cette heure dans l'élément html ayant pour id heure document.getElementById(\"heure\").innerHTML = d.toLocaleTimeString(); } </script> </head> <body> <h1> Javascript en action </h1> <p> Page ouverte à: <span id= \"heure\" ></span> </p> </body> </html> Encore mieux afficher l'heure actuelle en éxecutant l'affichage toutes les mille millisecondes !doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" /> <title> Un peu de javascript </title> <script type= \"text/javascript\" charset= \"utf-8\" > window.onload = function() { function myTimer() { var d = new Date(); document.getElementById(\"heure\").innerHTML = d.toLocaleTimeString(); } setInterval(function() { myTimer() }, 1000); } </script> </head> <body> <h1> Javascript en action </h1> <p> Il est: <span id= \"heure\" ></span> </p> </body> </html> Contrôler des événements On éxecuter du javascript lorsqu'on presse un bouton avec l'attribut onclick <!DOCTYPE html> <html> <body> <h1 id= \"id1\" > Mon titre de niveau 1 </h1> <button type= \"button\" onclick= \"document.getElementById('id1').style.color = 'red'\" > Attention! Que va-t-il se passer? </button> </body> </html> Ou encore lorsque la souris survole un élément avec l'attribut onmouseover . <!DOCTYPE html> <html> <body> <div onmouseover= \"mOver(this)\" onmouseout= \"mOut(this)\" style= \"background-color:#D5AA12;font-size: 13rem;width:19rem;padding:40px;\" > Sol </div> <script> function mOver ( obj ) { obj . innerHTML = \"Fa\" ; obj . style . background = \"#FF5546\" ; } function mOut ( obj ) { obj . innerHTML = \"Sol\" ; obj . style . background = \"#D5AA12\" ; } </script> </body> </html> Pour aller plus loin Lorsqu'on modifie une page html grâce à javascript, on manipule le DOM : Document Object Model. Pour plus de précisions et d'autres exemples interactifs voir l'excellent site w3schools"},{"loc":"http://benjaminabel.github.io/icn/html/ajouter-du-style-avec-css/","title":"Ajouter du style avec css","resume":"Les feuilles de style en cascade, généralement appelées CSS de l'anglais Cascading Style Sheets, forment un langage informatique qui décrit la présentation des documents HTML et XML","tags":"HTML","text":"Les feuilles de style en cascade, généralement appelées CSS de l'anglais Cascading Style Sheets, forment un langage informatique qui décrit la présentation des documents HTML et XML. Les standards définissant CSS sont publiés par le World Wide Web Consortium (W3C). Introduit au milieu des années 1990, CSS devient couramment utilisé dans la conception de sites web et bien pris en charge par les navigateurs web dans les années 2000. Source Wikipedia Syntaxe Une règle css est constituée d'un sélecteur suivi d'un bloc de déclaration entre accolades. Chaque déclaration se termine par un point-virgule. exemple p { color : red ; text-align : center ; } Cette règle permet de colorier en rouge et de centrer tous les paragraphes du document html. Il est possible de sélectionner plusieurs éléments en les séparant par des virgules. Les commentaires utilisent la syntaxe suivante: /* Un commentaire */ Intégration de code css dans une page html Il existe trois façons d'insérer une feuille de style au sein d'un document html: Insertion directe dans les balises html On utilise alors l'attribut style au sein de la balise ouvrante de l'élément à styler. <h1 style= \"color:blue; margin-left:30px;\" > This is a heading. </h1> Cette méthode est peu recommandée en raison du but même la définition des langages html et css qui est de séparer le fond et la forme. Utilisation d'une feuille de style interne On intègre le code css au sein de balises <style> dans l'entête du document(le ). <head> <style> body { background-color: linen; } h1 { color: maroon; margin-left: 40px; } </style> </head> Méthode pratique lorsque l'on a des documents html d'une seule page ou avec des styles spécifiques. Utilisation d'une feuille de style externe on écrit le code css dans un fichier avec l'extension .css et on l'appelle dans l'entête du document(le ). <head> <link rel= \"stylesheet\" type= \"text/css\" href= \"mystyle.css\" > </head> C'est la méthode préférée lorsque l'on a un ensemble de pages qui contiennent des styles identiques, cela permet d'alléger l'écriture du code et les requêtes vers le serveur de documents. Ordre d'application des règles Ce n'est pas pour rien qu'on parle de feuilles de styles en cascade, car en fait la difficulté en css est souvent que l'on définit des règles différentes pour des tags identiques, et qu'il faut savoir qu'elle règle va s'appliquer sur notre élément. Par ordre de priorité croissante: Règles par défaut du navigateur Feuille de style externe Feuille de style interne Style au sein d'un élément html. Sélecteurs plus élaborés Il est possible de sélectionner plusieurs balises à la fois pour leur appliquer une règle commune, ces balises doivent alors être séparées par des virgules . h1, h2, h3 {color: lime;} La virgule est très importante, car si on sépare les sélecteurs par des espaces il s'agit d'une sélection par descendence , le code css suivant par exemple ne sélectionne que les paragraphes contenus dans une balise div ( voir mdn pour plus de détails ). div p {background-color: red;} Pour appliquer un même style à plusieurs éléments on peut leur ajouter un attribut html class=\"class-name\" , qui pourra être sélectionné en css avec le sélecteur .class-name . Pour appliquer un style specifique à un unique éléments on lui ajoute un attribut html id=\"id-name\" , qui pourra être sélectionné en css avec le sélecteur #id-name . Des styles plus élaborés Références des propriétés css Cette référence CSS sur MDN liste toutes les propriétés standards CSS. Tutoriels et exemples en ligne Le site w3cschools présente des exemples éditables et dynamiques de situations courantes lors du stylage d'une page web, voir notamment les pages suivantes: CSS Backgrounds et CSS3 Backgrounds pour les arrières plans CSS Text , CSS Fonts et CSS3 Fonts pour la mise en forme du texte CSS Lists pour les listes numérotées on non. CSS Box Model et CSS3 Borders pour les modèles de boîtes CSS3 Transitions et CSS3 Animations pour des effets dynamiques sur vos pages. Déboguer son code css Inspecteur de styles du navigateur Pour savoir qu'elle règle a été utilisée par le navigateur, la console web du navigateur est d'un grand secours. On peut par exemple inspecter un élément et savoir qu'elles règles css s'appliquent et qu'elles règles css ont été suplantés. Pour accéder à la console web, taper CTRL+MAJ+K sur firefox, pour inspecter un élément il suffit de le sélectionner et de faire un click droit de la souris puis de taper x . Validateur du w3c Le site du w3c propose comme pour le language html un (validateur)[http://jigsaw.w3.org/css-validator/#validate_by_input+with_options] de fichier css:"},{"loc":"http://benjaminabel.github.io/icn/html/dessiner-dans-une-page-web/","title":"Dessiner dans une page web","resume":"Il existe deux grands types de formats d'images: les images matricielles, et les images vectorielles","tags":"HTML","text":"Il existe deux grands types de formats d'images: les images matricielles, et les images vectorielles. Ces deux types d'images peuvent être intégrées dans une page web grâce à la balise <img> , mais elles peuvent être aussi codées directement dans la page grâce aux balises <svg> et <canvas> . Dessin vectoriel en svg Le format svg est un format d'image vectoriel proposé par le W3C. Dans ce format, les dessins sont décrits par un ensemble formes géométriques simples (arcs de cercle ou d'ellipse, segments de droite, courbes de Bézier...) Syntaxe Le fichier svg est un fichier xml qui indique les formes présentes dans le dessin( rect pour rectangle, circle pour cercle,...) Exemple: Créer un fichier texte appelé image.svg avec le contenu suivant. <?xml version=\"1.0\" standalone=\"no\"?> <svg width= \"200\" height= \"250\" version= \"1.1\" xmlns= \"http://www.w3.org/2000/svg\" > <rect x= \"10\" y= \"10\" width= \"30\" height= \"30\" stroke= \"black\" fill= \"transparent\" stroke-width= \"5\" /> <rect x= \"60\" y= \"10\" rx= \"10\" ry= \"10\" width= \"30\" height= \"30\" stroke= \"black\" fill= \"transparent\" stroke-width= \"5\" /> <circle cx= \"25\" cy= \"75\" r= \"20\" stroke= \"red\" fill= \"transparent\" stroke-width= \"5\" /> <ellipse cx= \"75\" cy= \"75\" rx= \"20\" ry= \"5\" stroke= \"red\" fill= \"transparent\" stroke-width= \"5\" /> <line x1= \"10\" x2= \"50\" y1= \"110\" y2= \"150\" stroke= \"orange\" fill= \"transparent\" stroke-width= \"5\" /> <polyline points= \"60 110 65 120 70 115 75 130 80 125 85 140 90 135 95 150 100 145\" stroke= \"orange\" fill= \"transparent\" stroke-width= \"5\" /> <polygon points= \"50 160 55 180 70 180 60 190 65 205 50 195 35 205 40 190 30 180 45 180\" stroke= \"green\" fill= \"transparent\" stroke-width= \"5\" /> <path d= \"M20,230 Q40,205 50,230 T90,230\" fill= \"none\" stroke= \"blue\" stroke-width= \"5\" /> </svg> Lorsque vous ouvrez ce fichier avec une visionneuse d'images, vous devriez obtenir l'image suivante: Essayez modifier certains des paramètres du fichier svg pour vous familiariser avec sa syntaxe, vous pourrez parfaire votre connaissance en utilisant cette page du Tutoriel sur MDN Intégration Il peut être intégré à des pages web soit: En appelant un fichier svg externe grâce à la balise <img> <img src=\"image.svg\"> Soit en intégrant directement le code svg dans le code html de la page grâce à la baise <svg> <!doctype html> <html> <body> <h1> Un dessin vectoriel en svg </h1> <svg width= \"200\" height= \"200\" style= \"background-color: lightgray;\" > <circle cx= \"50%\" cy= \"50%\" r= \"40%\" stroke= \"green\" stroke-width= \"3%\" fill= \"yellow\" /> </svg> </body> </html> RENDU: Dessin matriciel dans le canvas La balise <canvas> qui fait partie de la spécification HTML5 du W3C permet d'effectuer des rendus dynamiques d'images bitmap dans le navigateur grâce à des scripts javascript . Pour utiliser les zones de dessin canvas, on ajoute un élément <canvas> vide dans le corps du document avec un id afin de pouvoir le modifier à partir du javascript. Code html <canvas id= \"monCanvas\" width= \"500\" height= \"400\" > Votre navigateur ne supporte pas la balise HTML5 Canvas. </canvas> Le texte présent dans l'élément canvas n'est affiché que si le navigateur ne connait pas cette balise. Code javascript Nous allons maintenant dessiner dans ce canvas grâce à un script javascript qu'on intégrera comme n'importe quel code javascript(voir Ajouter du dynamisme avec javascript ) var theCanvas = document . getElementById ( \"monCanvas\" ); var context = theCanvas . getContext ( \"2d\" ); function drawScreen () { //background context . fillStyle = \"#ffffaa\" ; context . fillRect ( 0 , 0 , 500 , 300 ); //text context . fillStyle = \"#333333\" ; context . font = \"20px Sans-Serif\" ; context . textBaseline = \"top\" ; context . fillText ( \"Bienvenue dan sle monde du canvas\" , 195 , 80 ); //box context . strokeStyle = \"#000000\" ; context . strokeRect ( 5 , 5 , 490 , 290 ); } drawScreen (); Voici le code html complet: <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" > <title> Dessin en canvas </title> <script type= \"text/javascript\" charset= \"utf-8\" > window.onload = function() { var theCanvas = document.getElementById(\"monCanvas\"); var ctx = theCanvas.getContext(\"2d\"); function drawScreen() { //background ctx.fillStyle = \"#ffffaa\"; ctx.fillRect(0, 0, 500, 400); //text ctx.fillStyle = \"#333333\"; ctx.font = \"18px Sans-Serif\"; ctx.textBaseline = \"top\"; ctx.fillText(\"Bienvenue dans le monde du canvas\", 95, 110); //box ctx.strokeStyle = \"#000000\"; ctx.strokeRect(5, 5, 490, 390); //smiley ctx.beginPath(); ctx.arc(250, 200, 50, 0, Math.PI * 2, true); // Tête ctx.fillStyle = \"#FFFF00\"; ctx.fill(); // Colorier la tête en jaune ctx.moveTo(285, 200); ctx.arc(250, 200, 35, 0, Math.PI, false); // Bouche ctx.moveTo(240, 190); ctx.arc(235, 190, 5, 0, Math.PI * 2, true); // Oeil gauche ctx.moveTo(270, 190); ctx.arc(265, 190, 5, 0, Math.PI * 2, true); // Oeil droit ctx.lineWidth = 5; ctx.stroke(); } drawScreen(); } </script> </head> <body> <canvas id= \"monCanvas\" width= \"500\" height= \"400\" > Votre navigateur ne supporte pas la balise HTML5 Canvas. </canvas> </body> </html> RENDU Essayez modifier certains des paramètres du code pour vous familiariser avec sa syntaxe, puis ajouter des éléments en utilisant cette page de référence de w3schools Créer des animations Pou animer un dessin canvas, nous allons utiliser la méthode window.requestAnimationFrame() , cette méthode permet d'éxecuter une fonction à chaque affichage de la fenêtre du navigateur(soit environ 60 images/seconde). On crée ainsi une fonction anime() qui s'appelle elle-même à chaque rafraichissement de l'affichage. // Création de la fonction function anime () { requestAnimationFrame ( anime ); // Commandes de dessin } // Appel de la fonction pour lancer l'animation anime (); Ensuite pour que l'affichage soit différent à chaque rafraichissement il faut que les commandes dessin utilisent des variables de coordonnées. Créer un monstre animé Utiliser le lien suivant pour voir comment créer un dessin animé en utilisant des coordonnées aléatoires. http://jsbin.com/garagowe/14/edit Déplacer un objet et détecter les bords pour qu'il rebondisse Voici par exemple comment on peut dessiner le même smiley que tout à l'heure, mais à des coordonnées x et y, données en paramètres de la fonction. Grâce à cette fonction il suffira d'éxecuter Smiley(60,70) pour dessiner un smiley centré aux coordonnées x = 60 et y = 70 . function Smiley ( x , y ) { this . x = x ; this . y = y ; this . dessineToi = function () { //smiley ctx . beginPath (); ctx . arc ( this . x , this . y , 50 , 0 , Math . PI * 2 , true ); // Tête ctx . fillStyle = \"#FFFF00\" ; ctx . fill (); // Colorier la tête en jaune ctx . moveTo ( this . x + 35 , this . y ); ctx . arc ( this . x , this . y , 35 , 0 , Math . PI , false ); // Bouche ctx . moveTo ( this . x - 10 , this . y - 10 ); ctx . arc ( this . x - 15 , this . y - 10 , 5 , 0 , Math . PI * 2 , true ); // Oeil gauche ctx . moveTo ( this . x + 20 , this . y - 10 ); ctx . arc ( this . x + 15 , this . y - 10 , 5 , 0 , Math . PI * 2 , true ); // Oeil droit ctx . lineWidth = 5 ; ctx . stroke (); }; On crée ensuite une méthode deplaceToi à l'objet Smiley qui ajoute vx à la coordonnée x et vy à la coordonnée y à chaque image. Puis une fonction checkWallCollision() qui vérifie que le smiley ne touche pas les bords de l'écran, et qui inverse une des composante de la vitesse lorsque le smiley touche une paroi horizontale ou verticale. Code complet <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" > <title> Dessin en canvas </title> <script type= \"text/javascript\" charset= \"utf-8\" > window.onload = function() { // Variable qui correspond au canvas var monCanvas = document.getElementById(\"monCanvas\"); // Dimensions du canvas var width = monCanvas.width; var height = monCanvas.height; // contexte graphique 2D var ctx = monCanvas.getContext('2d'); // Inititialisation des coordonnées et vitesses du smiley var smiley = new Smiley(width / 2, height / 2, (10 * Math.random()) - 5, (10 * Math.random()) - 5); // Lancement de l'animation anime(); function anime() { // 1) On dessine le fond du canvas dessineFond(); // 2) On déplace le smiley smiley.deplaceToi(); // 3) On regarde si le smiley touche un mur checkWallCollision(smiley); // 3) On dessine le smiley smiley.dessineToi(); // On demande une nouvelle frame d'animation window.requestAnimationFrame(anime); } function dessineFond() { // On efface l'écran ctx.clearRect(0, 0, monCanvas.width, monCanvas.height); //background ctx.fillStyle = \"#ffffcc\"; ctx.fillRect(0, 0, monCanvas.width, monCanvas.height); //box ctx.strokeStyle = \"#000000\"; ctx.strokeRect(5, 5, 490, 390); } // fonction smiley qui stocke ses coordonnées et sa vitesse // et qui possède deux méthodes pour se dessiner et se déplacer function Smiley(x, y, vx, vy) { this.x = x; this.y = y; this.vx = vx; this.vy = vy; this.radius = 50; this.dessineToi = function() { //smiley ctx.beginPath(); ctx.arc(this.x, this.y, 50, 0, Math.PI * 2, true); // Tête ctx.fillStyle = \"#FFFF00\"; ctx.fill(); // Colorier la tête en jaune ctx.moveTo(this.x + 35, this.y); ctx.arc(this.x, this.y, 35, 0, Math.PI, false); // Bouche ctx.moveTo(this.x - 10, this.y - 10); ctx.arc(this.x - 15, this.y - 10, 5, 0, Math.PI * 2, true); // Oeil gauche ctx.moveTo(this.x + 20, this.y - 10); ctx.arc(this.x + 15, this.y - 10, 5, 0, Math.PI * 2, true); // Oeil droit ctx.lineWidth = 5; ctx.stroke(); }; this.deplaceToi = function() { this.x += this.vx; this.y += this.vy; }; } function checkWallCollision(objet) { if (objet.x < objet.radius ) { objet.x = objet.radius; objet.vx *= -1; } if (objet.x > width - (objet.radius)) { objet.x = width - (objet.radius); objet.vx *= -1; } if (objet.y < objet.radius ) { objet.y = objet.radius; objet.vy *= -1; } if (objet.y > height - (objet.radius)) { objet.y = height - (objet.radius); objet.vy *= -1; } } } </script> </head> <body> <canvas id= \"monCanvas\" width= \"500\" height= \"400\" > Votre navigateur ne supporte pas la balise HTML5 Canvas. </canvas> </body> </html> RENDU Attention ce rendu est une vidéo de capture d'écran à 15 image par seconde, le rendu réél est beaucoup plus fluide et continu. Votre navigateur ne supporte pas les vidéos. // script permettant de tourner en boucle car loop marche pas var myVideo = document.getElementById('video'); if (typeof myVideo.loop == 'boolean') { // loop supported myVideo.loop = true; } else { // loop property not supported myVideo.on('ended', function () { this.currentTime = 0; this.play(); }, false); } myVideo.play();"},{"loc":"http://benjaminabel.github.io/icn/html/structure-dun-document-html/","title":"Structure d'un document html","resume":"HTML5 (HyperText Markup Language 5) est la dernière révision majeure d'HTML (format de données conçu pour représenter les pages web)","tags":"HTML","text":"HTML5 (HyperText Markup Language 5) est la dernière révision majeure d'HTML (format de données conçu pour représenter les pages web). Dans le langage courant, HTML5 désigne souvent un ensemble de technologies Web (HTML5, CSS3 et JavaScript) permettant notamment le développement d'applications (cf. DHTML). Source Wikipedia Vous pouvez afficher le code html d'une page web, en cliquant droit sur celle-ci et en choisissant Afficher le code source de la page , ou en utilisant sur Mozilla le raccourci: CTRL+U . Balises et attributs Balises Le langage html utilise des balises pour indiquer le sens sémantique des éléments d'une page. Ces balises ou tags permettent de construire une hiérarchie au sein du document appelée DOM(Document Object Model) Ces balises sont référencées sur le site MDN Par exemple: les balises de titre (headings) <h1>...</h1> jusqu'à <h6>...</h6> permettent d'utiliser jusqu'à six niveaux de titres dans la page. la balise de paragraphe <p>...</p> . la balise d'ancre <a>...</a> permet de créer un lien hypertexte. les balises <div>...</div> permettent d'englober plusieurs autres éléments, ce sont des conteneurs qui permettent de rassembler ensemble divers éléments. Certaines balises sont auto-fermantes c'est à dire qu'elles ne présentent pas de balises fermantes. Par exemple la balise d'image <img> . Remarque: habituellement, on écrit les balises en minuscules. Les attributs d'une balise Les balises ouvrantes peuvent contenir des attributs permettant de préciser certains éléments relatifs au contenu de la balise. Par exemple, une balise d'ancre <a> doit obligatoirement spécifier l'attribut href=\"...\" qui donne la cible du lien à viser lorsque l'utilisateur clique sur le texte de l'ancre. <a href= \"https://duckduckgo.com/\" > Un moteur de recherche alternatif </a> s'affichera Un moteur de recherche alternatif Autre exemple, la balise <img> doit obligatoirement spécifier les attributs src et alt de notre image. src : adresse de l'image. alt : texte à afficher si la source ne peut-être trouvée. <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/79/Mozilla_Aurora_icon.png\" alt=\"Mozilla Aurora icon\"/> s'affichera Imbrications des balises Les balises ouvrantes et fermantes doivent toujours être correctement imbriquées, c'est à dire que les balises fermantes doivent êtres écrites dans l'ordre inverse des balises d'ouverture. Une bonne imbrication des balises est une des règles à respecter afin d'avoir un code valide. Source MDN Voici un exemple de code valide : <p> Ceci est <strong> très </strong> important </p> . Voici un exemple de code non-valide : <em> Ceci est <strong> très </em> important </strong> . Structure minimale d'un fichier html Le fichier doit commencer par le doctype html <!doctype html> L'ensemble du document est imbriqué à l'intérieur de balises <html> La balise html possède deux balises filles: la balise <head> qui contient des informations telles que le titre ou l'encodage des caractères de la page qui ne sont pas affichées mais qui sont utiles au navigateur pour le rendu ou encore aux moteurs de recherche pour l'indexation de votre page. la balise <body> qui contient l'ensemble du code à afficher lors du rendu. Exemple de fichier html minimal L'indentation n'est pas obligatoire, mais elle rend le fichier plus lisible. <!doctype html> <html lang= \"fr\" > <head> <meta charset= \"utf-8\" /> <title> Un document minuscule </title> </head> <body> <h1> Titre principal de mon document </h1> <!-- Ceci est un commentaire --> <p> Regarde maman, je suis en train de coder en <abbr title= \"Hyper Text Markup Language\" lang= \"en\" > HTML </abbr> ! </p> </body> </html> Validation et nettoyage de votre page web Pour vérifier si votre code html est valide, et être informés sur les erreurs et recommandations, on peut utiliser le validateur html5 mis au point par la fondation mozilla: https://html5.validator.nu/ Vous pouvez même nettoyer votre code et le réindenter avec l'outil en ligne suivant: http://jsbeautifier.org/"}]}